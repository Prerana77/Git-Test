1. Association

- A general "has-a" relationship between two classes.
- Can be one-to-one, one-to-many, many-to-one, or many-to-many.

Example: One-to-One Association

class Person {
    String name;
    Address address;

    Person(String name, Address address) {
        this.name = name;
        this.address = address;
    }
}

class Address {
    String city;

    Address(String city) {
        this.city = city;
    }
}

2. Aggregation (Has-a Relationship)

- A weaker form of association.
- One class has a reference to another class, but both can exist independently.
- Represented with an open diamond in UML.

Example:

class Department {
    String name;
    List<Employee> employees;

    Department(String name) {
        this.name = name;
        this.employees = new ArrayList<>();
    }

    void addEmployee(Employee emp) {
        employees.add(emp);
    }
}

class Employee {
    String name;

    Employee(String name) {
        this.name = name;
    }
}

3. Composition
- A stronger form of aggregation.
- The lifetime of the contained object depends on the container object.
- Represented with a filled diamond in UML.

Example:

class House {
    private Room room;

    House() {
        this.room = new Room();
    }
}

class Room {
    Room() {
        System.out.println("Room created");
    }
}

Inheritance (Is-a Relationship)

- One class inherits from another (extends it).
- Represents an "is-a" relationship.
- Enables code reuse and polymorphism.

Example:

class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    void makeSound() {
        System.out.println("Dog barks");
    }
}
